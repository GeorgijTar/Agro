// <auto-generated />
using System;
using Agro.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agro.DAL.MySql.Migrations
{
    [DbContext(typeof(AgroDb))]
    [Migration("20220806055234_Init3")]
    partial class Init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSelect")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentPlanId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentPlanId");

                    b.HasIndex("StatusId");

                    b.ToTable("AccountingPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Раздел I",
                            IsSelect = false,
                            Name = "Внеоборотные активы",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 2,
                            Code = "01",
                            IsSelect = false,
                            Name = "Основные средства в организации",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 3,
                            Code = "01-1",
                            IsSelect = true,
                            Name = "Основные средства в организации (Недвижимое имущество)",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 4,
                            Code = "01-2",
                            IsSelect = true,
                            Name = "Основные средства в организации (Движимое имущество)",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 5,
                            Code = "01-6",
                            IsSelect = true,
                            Name = "Земельные участки",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "01-4",
                            IsSelect = true,
                            Name = "Выбытие основных спедств",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 7,
                            Code = "02",
                            IsSelect = false,
                            Name = "Амортизация ОС",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 8,
                            Code = "02-1",
                            IsSelect = true,
                            Name = "Амортизация основных средств, являющихся недвижимым имуществом",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 9,
                            Code = "02-2",
                            IsSelect = true,
                            Name = "Амортизация основных средств, являющихся движимым имуществом",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 10,
                            Code = "02-3",
                            IsSelect = true,
                            Name = "Амортизация арендованных основных средств",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 11,
                            Code = "03",
                            IsSelect = true,
                            Name = "Доходные вложения в материальные ценности",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 12,
                            Code = "04",
                            IsSelect = true,
                            Name = "Нематериальные активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 13,
                            Code = "05",
                            IsSelect = true,
                            Name = "Амортизация нематериальных активов",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 14,
                            Code = "07",
                            IsSelect = true,
                            Name = "Оборудование к установке",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 15,
                            Code = "08",
                            IsSelect = false,
                            Name = "Вложения во внеоборотные активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 16,
                            Code = "08-1",
                            IsSelect = true,
                            Name = "Приобретение земельных участков",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 17,
                            Code = "08-2",
                            IsSelect = true,
                            Name = "Приобретение объектов природопользования",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 18,
                            Code = "08-3",
                            IsSelect = true,
                            Name = "Строительство объектов основных средств",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 19,
                            Code = "08-3-1",
                            IsSelect = true,
                            Name = "Строительство объектов основных средств (Ангар)",
                            ParentPlanId = 18,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 20,
                            Code = "08-4",
                            IsSelect = true,
                            Name = "Приобретение объектов основных средств",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 21,
                            Code = "08-5",
                            IsSelect = true,
                            Name = "Приобретение нематериальных активов",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 22,
                            Code = "08-6",
                            IsSelect = true,
                            Name = "Закладка и выращивание многолетних насаждений",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 23,
                            Code = "08-7",
                            IsSelect = true,
                            Name = "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 24,
                            Code = "09",
                            IsSelect = true,
                            Name = "Отложенные налоговые активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 25,
                            Code = "10",
                            IsSelect = false,
                            Name = "Материалы",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 26,
                            Code = "10-1",
                            IsSelect = true,
                            Name = "Сырье и материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 27,
                            Code = "10-2",
                            IsSelect = true,
                            Name = "Семена и посадочный материал",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 28,
                            Code = "10-3",
                            IsSelect = true,
                            Name = "Топливо (ГСМ)",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 29,
                            Code = "10-4",
                            IsSelect = true,
                            Name = "Покупные полуфабрикаты и комплектующие изделия, конструкции и детали",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 30,
                            Code = "10-5",
                            IsSelect = true,
                            Name = "Запасные части",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 31,
                            Code = "10-6",
                            IsSelect = true,
                            Name = "Удобрения, средства защиты растений",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 32,
                            Code = "10-8",
                            IsSelect = true,
                            Name = "Тара и тарные материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 33,
                            Code = "10-9",
                            IsSelect = true,
                            Name = "Инвентарь и хозяйственные принадлежности",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 34,
                            Code = "10-10",
                            IsSelect = true,
                            Name = "Специальная одежда, средства индивидуальной защиты",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 35,
                            Code = "10-11",
                            IsSelect = true,
                            Name = "Материалы и сырье, переданные в переработку на сторону",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 36,
                            Code = "10-12",
                            IsSelect = true,
                            Name = "Прочие материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 37,
                            Code = "14",
                            IsSelect = false,
                            Name = "Резервы под снижение стоимости материальных ценностей",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 38,
                            Code = "14-1",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости материалов",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 39,
                            Code = "14-2",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости товаров",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 40,
                            Code = "14-3",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости готовой продукции",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 41,
                            Code = "19",
                            IsSelect = false,
                            Name = "НДС по приобретенным ценностям",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 42,
                            Code = "19-1",
                            IsSelect = true,
                            Name = "НДС по приобретенным товарно-материальным ценностям, работам, услугам",
                            ParentPlanId = 41,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 43,
                            Code = "19-2",
                            IsSelect = true,
                            Name = "НДС по приобретённым продуктам питания",
                            ParentPlanId = 41,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 44,
                            Code = "Раздел II",
                            IsSelect = false,
                            Name = "Производственные запасы",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 45,
                            Code = "Раздел III",
                            IsSelect = false,
                            Name = "Затраты на производство",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 46,
                            Code = "20",
                            IsSelect = false,
                            Name = "Основное производство",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 47,
                            Code = "20-1",
                            IsSelect = true,
                            Name = "Основное производство - Растениеводство",
                            ParentPlanId = 46,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 48,
                            Code = "20-3",
                            IsSelect = true,
                            Name = "Сортировка сельхоз продукции",
                            ParentPlanId = 46,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 49,
                            Code = "21",
                            IsSelect = true,
                            Name = "Полуфабрикаты собственного производства",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 50,
                            Code = "23",
                            IsSelect = false,
                            Name = "Вспомогательные производства",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 51,
                            Code = "23-2",
                            IsSelect = true,
                            Name = "Ремонт зданий, сооружений и сельхоз техники",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 52,
                            Code = "23-3",
                            IsSelect = true,
                            Name = "Электроснабжение",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 53,
                            Code = "23-4",
                            IsSelect = true,
                            Name = "Водоснаюжение",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 54,
                            Code = "23-5",
                            IsSelect = true,
                            Name = "Автотранспорт",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 55,
                            Code = "23-6",
                            IsSelect = true,
                            Name = "Газоснабжение",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 56,
                            Code = "25",
                            IsSelect = false,
                            Name = "Общепроизводственные расходы",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 57,
                            Code = "25-1",
                            IsSelect = true,
                            Name = "Общепроизводственные расходы - Растениеводства",
                            ParentPlanId = 56,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 58,
                            Code = "26",
                            IsSelect = true,
                            Name = "Общехозяйственные расходы",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 59,
                            Code = "Раздел IV",
                            IsSelect = false,
                            Name = "Готовая продукция и товары",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 60,
                            Code = "40",
                            IsSelect = true,
                            Name = "Выпуск продукции (Продукция с поля)",
                            ParentPlanId = 59,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 61,
                            Code = "41",
                            IsSelect = false,
                            Name = "Товары",
                            ParentPlanId = 59,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 62,
                            Code = "41-1",
                            IsSelect = true,
                            Name = "Товары на складах",
                            ParentPlanId = 61,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 63,
                            Code = "41-2",
                            IsSelect = true,
                            Name = "Товары к продаже",
                            ParentPlanId = 61,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 64,
                            Code = "43",
                            IsSelect = false,
                            Name = "Готовая продукция",
                            ParentPlanId = 59,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 65,
                            Code = "43-1",
                            IsSelect = true,
                            Name = "Готовая продукция - Растениеводства",
                            ParentPlanId = 64,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 66,
                            Code = "Раздел V",
                            IsSelect = false,
                            Name = "Денежные средства",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 67,
                            Code = "50",
                            IsSelect = true,
                            Name = "Касса",
                            ParentPlanId = 66,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 68,
                            Code = "51",
                            IsSelect = false,
                            Name = "Расчетные счета",
                            ParentPlanId = 66,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 69,
                            Code = "51-1",
                            IsSelect = true,
                            Name = "Расчетный счет в Россельхозбанке",
                            ParentPlanId = 68,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 70,
                            Code = "51-2",
                            IsSelect = true,
                            Name = "Расчетный счет в ОТП",
                            ParentPlanId = 68,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 71,
                            Code = "51-3",
                            IsSelect = true,
                            Name = "Расчетный счет в Сбербанке",
                            ParentPlanId = 68,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 72,
                            Code = "52",
                            IsSelect = false,
                            Name = "Валютные счета",
                            ParentPlanId = 66,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 73,
                            Code = "52-1",
                            IsSelect = true,
                            Name = "Валютные счета внутри страны",
                            ParentPlanId = 72,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 74,
                            Code = "55",
                            IsSelect = false,
                            Name = "Специальные счета в банках",
                            ParentPlanId = 66,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 75,
                            Code = "55-3",
                            IsSelect = true,
                            Name = "Депозитные счета",
                            ParentPlanId = 74,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 76,
                            Code = "57",
                            IsSelect = true,
                            Name = "Переводы в пути",
                            ParentPlanId = 66,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 77,
                            Code = "Раздел VI",
                            IsSelect = false,
                            Name = "Расчеты",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 78,
                            Code = "60",
                            IsSelect = false,
                            Name = "Расчеты с поставщиками и подрядчиками",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 79,
                            Code = "60-1",
                            IsSelect = true,
                            Name = "Расчеты с поставщиками и подрядчиками",
                            ParentPlanId = 78,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 80,
                            Code = "60-2",
                            IsSelect = true,
                            Name = "Расчеты с поставщиками и подрядчиками по авансам выданным",
                            ParentPlanId = 78,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 81,
                            Code = "62",
                            IsSelect = false,
                            Name = "Расчеты с покупателями, заказчиками",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 82,
                            Code = "62-1",
                            IsSelect = true,
                            Name = "Расчеты с покупателями, заказчиками",
                            ParentPlanId = 81,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 137,
                            Code = "62-2",
                            IsSelect = true,
                            Name = "Расчеты с покупателями, заказчиками по авансам полученным",
                            ParentPlanId = 81,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 83,
                            Code = "66",
                            IsSelect = false,
                            Name = "Расчеты по краткосрочным кредитам и займам",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 84,
                            Code = "67",
                            IsSelect = false,
                            Name = "Расчеты по долгосрочным кредитам и займам",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 85,
                            Code = "68",
                            IsSelect = false,
                            Name = "Расчеты по налогам и сборам",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 86,
                            Code = "68-1",
                            IsSelect = true,
                            Name = "НДС с реализованной продукции",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 87,
                            Code = "68-3",
                            IsSelect = true,
                            Name = "Налог на доходы физических лиц",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 88,
                            Code = "68-3Д",
                            IsSelect = true,
                            Name = "Налог на доходы физических лиц с дивидендов",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 89,
                            Code = "68-4",
                            IsSelect = true,
                            Name = "Налог на прибыль организаций",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 90,
                            Code = "68-5",
                            IsSelect = true,
                            Name = "Транспортный налог с организаций",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 91,
                            Code = "68-6",
                            IsSelect = true,
                            Name = "Налог на имущество организаций",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 92,
                            Code = "68-7",
                            IsSelect = true,
                            Name = "Земельный налог с организаций",
                            ParentPlanId = 85,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 93,
                            Code = "69",
                            IsSelect = false,
                            Name = "Расчеты по социальному страхованию и обеспечению",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 94,
                            Code = "69-1",
                            IsSelect = false,
                            Name = "Расчеты по социальному страхованию",
                            ParentPlanId = 93,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 95,
                            Code = "69-1-1",
                            IsSelect = true,
                            Name = "Расчеты по обязательному социальному страхованию",
                            ParentPlanId = 94,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 96,
                            Code = "69-1-2",
                            IsSelect = true,
                            Name = "Расчеты по обязательному социальному страхованию от несчастных случаев",
                            ParentPlanId = 94,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 97,
                            Code = "69-2",
                            IsSelect = true,
                            Name = "Расчеты по пенсионному обеспечению",
                            ParentPlanId = 93,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 98,
                            Code = "69-3",
                            IsSelect = true,
                            Name = "Расчеты по обязательному медицинскому страхованию",
                            ParentPlanId = 93,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 99,
                            Code = "70",
                            IsSelect = true,
                            Name = "Расчеты с персоналом по оплате труда",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 100,
                            Code = "71",
                            IsSelect = true,
                            Name = "Расчеты с подотчетными лицами",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 101,
                            Code = "73",
                            IsSelect = true,
                            Name = "Расчеты с персоналом по прочим операциям",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 102,
                            Code = "75",
                            IsSelect = true,
                            Name = "Расчеты с учредителями",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 103,
                            Code = "76",
                            IsSelect = true,
                            Name = "Расчеты с разными дебиторами и кредиторами",
                            ParentPlanId = 77,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 104,
                            Code = "76АВ",
                            IsSelect = true,
                            Name = "Расчеты с разными дебиторами и кредиторами по авансам полученным",
                            ParentPlanId = 103,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 105,
                            Code = "76ВА",
                            IsSelect = true,
                            Name = "Расчеты с разными дебиторами и кредиторами по авансам выданным",
                            ParentPlanId = 103,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 106,
                            Code = "Раздел VII",
                            IsSelect = false,
                            Name = "Капитал",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 107,
                            Code = "80",
                            IsSelect = true,
                            Name = "Уставный капитал",
                            ParentPlanId = 106,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 108,
                            Code = "83",
                            IsSelect = true,
                            Name = "Нераспределенная прибыль (непокрытый убыток)",
                            ParentPlanId = 106,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 109,
                            Code = "84",
                            IsSelect = true,
                            Name = "Добавочный капитал",
                            ParentPlanId = 106,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 110,
                            Code = "86",
                            IsSelect = true,
                            Name = "Целевое финансирование",
                            ParentPlanId = 106,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 111,
                            Code = "Раздел VIII",
                            IsSelect = false,
                            Name = "Финансовые результаты",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 112,
                            Code = "90",
                            IsSelect = false,
                            Name = "Продажи",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 113,
                            Code = "90-1",
                            IsSelect = true,
                            Name = "Реализацйия продукции растениеводства",
                            ParentPlanId = 112,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 114,
                            Code = "90-3",
                            IsSelect = true,
                            Name = "Реализацйия прочей продукции и ТМЦ",
                            ParentPlanId = 112,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 115,
                            Code = "91",
                            IsSelect = false,
                            Name = "Прочие доходы и расходы",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 116,
                            Code = "91-1",
                            IsSelect = true,
                            Name = "Прочие доходы",
                            ParentPlanId = 115,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 117,
                            Code = "91-2",
                            IsSelect = true,
                            Name = "Прочие расходы",
                            ParentPlanId = 115,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 118,
                            Code = "91-9",
                            IsSelect = true,
                            Name = "Сальдо прочих доходов и расходов",
                            ParentPlanId = 115,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 119,
                            Code = "94",
                            IsSelect = true,
                            Name = "Недостачи и потери от порчи ценностей",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 120,
                            Code = "96",
                            IsSelect = false,
                            Name = "Резервы предстоящих расходов",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 121,
                            Code = "96-1",
                            IsSelect = true,
                            Name = "Резерв на оплату отпусков",
                            ParentPlanId = 120,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 122,
                            Code = "97",
                            IsSelect = true,
                            Name = "Расходы будущих периодов",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 123,
                            Code = "99",
                            IsSelect = true,
                            Name = "Прибыли и убытки",
                            ParentPlanId = 111,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 124,
                            Code = "Раздел IX",
                            IsSelect = false,
                            Name = "Забалансовые счета",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 125,
                            Code = "001",
                            IsSelect = true,
                            Name = "Арендованные основные средства",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 126,
                            Code = "002",
                            IsSelect = true,
                            Name = "Товарно-материальные ценности, принятые на ответственное хранение",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 127,
                            Code = "003",
                            IsSelect = true,
                            Name = "Материалы, принятые в переработку",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 128,
                            Code = "004",
                            IsSelect = true,
                            Name = "Товары, принятые на комиссию",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 129,
                            Code = "005",
                            IsSelect = true,
                            Name = "Оборудование, принятое для монтажа",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 130,
                            Code = "006",
                            IsSelect = true,
                            Name = "Бланки строгой отчетности",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 131,
                            Code = "007",
                            IsSelect = true,
                            Name = "Списанная в убыток задолженность неплатежеспособных дебиторов",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 132,
                            Code = "008",
                            IsSelect = true,
                            Name = "Обеспечение обязательств и платежей (полученные)",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 133,
                            Code = "009",
                            IsSelect = true,
                            Name = "Обеспечение обязательств и платежей (выданные)",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 134,
                            Code = "010",
                            IsSelect = true,
                            Name = "Износ основных средств",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 135,
                            Code = "011",
                            IsSelect = true,
                            Name = "Основные средства, сданные в аренду",
                            ParentPlanId = 124,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 136,
                            Code = "012",
                            IsSelect = true,
                            Name = "Земельные угодья",
                            ParentPlanId = 124,
                            StatusId = 5
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressRf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GarId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Unreliability")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnreliabilityDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StatusId");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbbreviatedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Areal")
                        .HasColumnType("double");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentFieldId");

                    b.HasIndex("StatusId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.LandPlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("LandPlot");
                });

            modelBuilder.Entity("Agro.DAL.Entities.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bik")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Ks")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NameBank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Okato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Okato");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Okfs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Okfs");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Okogy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Okogy");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Okopf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Okopf");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Oktmo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Oktmo");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Classifiers.Okved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Okveds");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("BankDetailsOrgId")
                        .HasColumnType("int");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailsId");

                    b.HasIndex("BankDetailsOrgId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ogrn")
                        .HasColumnType("longtext");

                    b.Property<string>("Okpo")
                        .HasColumnType("longtext");

                    b.Property<string>("PayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeDocId");

                    b.HasIndex(new[] { "Inn" }, "NameIndex")
                        .IsUnique();

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeIssuing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Issuing")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Series")
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeDocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeDocId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TabNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.HasIndex("PostId");

                    b.HasIndex("StatusId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Agro.DAL.Entities.GroupDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeApplication")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Покупатели",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Поставщики",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Зерновые",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Масляничные",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Технические",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Отходы",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Средства защиты растений",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Удобрения",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Семена",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Запасные части",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Материалы",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Малоценные товары, инвентарь",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ГСМ",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Паспорт гражданина РФ",
                            TypeApplication = "УЛ"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Загранпаспорт гражданина РФ",
                            TypeApplication = "УЛ"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Свидетельство о рождении",
                            TypeApplication = "УЛ"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Временное удостоверение личности",
                            TypeApplication = "УЛ"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Удостоверение личности военнослужащего РФ (военный билет, паспорт моряка)",
                            TypeApplication = "УЛ"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Вид на жительство",
                            TypeApplication = "УЛ"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("AmountNds")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("BankDetailsOrgId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInvoice")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("NdsId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ReestrInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailsId");

                    b.HasIndex("BankDetailsOrgId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("NdsId");

                    b.HasIndex("ReestrInvoiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Nds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("OverPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ndses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Без НДС",
                            OverPercent = 1m,
                            Percent = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "0%",
                            OverPercent = 1m,
                            Percent = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "10%",
                            OverPercent = 1.1m,
                            Percent = 10
                        },
                        new
                        {
                            Id = 4,
                            Name = "20%",
                            OverPercent = 1.2m,
                            Percent = 20
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbbreviatedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("AddressUrId")
                        .HasColumnType("int");

                    b.Property<int?>("CashierId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralAccountantId")
                        .HasColumnType("int");

                    b.Property<int?>("HrId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ogrn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OkatoId")
                        .HasColumnType("int");

                    b.Property<int?>("OkfsId")
                        .HasColumnType("int");

                    b.Property<int?>("OkogyId")
                        .HasColumnType("int");

                    b.Property<int?>("OkopfId")
                        .HasColumnType("int");

                    b.Property<string>("Okpo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OktmoId")
                        .HasColumnType("int");

                    b.Property<int>("OkvedId")
                        .HasColumnType("int");

                    b.Property<int?>("RegFnsId")
                        .HasColumnType("int");

                    b.Property<int?>("RegFssId")
                        .HasColumnType("int");

                    b.Property<int?>("RegPfrId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressUrId");

                    b.HasIndex("CashierId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GeneralAccountantId");

                    b.HasIndex("HrId");

                    b.HasIndex("OkatoId");

                    b.HasIndex("OkfsId");

                    b.HasIndex("OkogyId");

                    b.HasIndex("OkopfId");

                    b.HasIndex("OktmoId");

                    b.HasIndex("OkvedId");

                    b.HasIndex("RegFnsId");

                    b.HasIndex("RegFssId");

                    b.HasIndex("RegPfrId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Agro.DAL.Entities.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IdentityDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Snils")
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("StatusId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameMini")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NdsId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NdsId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ProductInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("AmountNds")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("NdsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("NdsId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsInvoice");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ReestrInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AmountReestr")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateReestr")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ReestrInvoice");
                });

            modelBuilder.Entity("Agro.DAL.Entities.RegInfoOrg.RegFns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressFns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodeFns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateReg")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NameFns")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegFns");
                });

            modelBuilder.Entity("Agro.DAL.Entities.RegInfoOrg.RegFss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeFss")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateReg")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NameFss")
                        .HasColumnType("longtext");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegFss");
                });

            modelBuilder.Entity("Agro.DAL.Entities.RegInfoOrg.RegPfr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodePfr")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateReg")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NamePfr")
                        .HasColumnType("longtext");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegPfr");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ScanFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("BodyBytes")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SpecificationContractId")
                        .HasColumnType("int");

                    b.Property<double>("TotalBytes")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SpecificationContractId");

                    b.ToTable("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("TypeId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Agro.DAL.Entities.StaffList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("StatusId");

                    b.ToTable("StaffList");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Черновик"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Новый"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Действующий"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Заблокировано"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Актуально"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Удален"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Архивный"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Принят к оплате"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Готов к оплате"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Оплачен"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Выставлен"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Отправлен"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ошибка отправки"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.TypeDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeApplication")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Юридическое лицо",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Индивидуальный предприниматель",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Государственный орган",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Физическое лицо",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Юридический адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Фактический адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Почтовый адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Готовая продукция",
                            TypeApplication = "Товары"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Материальные запасы",
                            TypeApplication = "Товары"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Выставленные",
                            TypeApplication = "Счета"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Полученные",
                            TypeApplication = "Счета"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Удостоверение личности",
                            TypeApplication = "УЛ"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.UnitOkei", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OkeiCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UnitsOkei");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "ч",
                            Name = "Час",
                            OkeiCode = "356"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "мм",
                            Name = "Миллиметр",
                            OkeiCode = "003"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "см",
                            Name = "Сантиметр",
                            OkeiCode = "004"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "м",
                            Name = "Метр",
                            OkeiCode = "006"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "г",
                            Name = "Грамм",
                            OkeiCode = "163"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "кг",
                            Name = "Килограмм",
                            OkeiCode = "166"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "т",
                            Name = "Тонна; метрическая тонна (1000 кг)",
                            OkeiCode = "168"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "м3",
                            Name = "Кубический метр",
                            OkeiCode = "113"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "м2",
                            Name = "Квадратный метр",
                            OkeiCode = "055"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "га",
                            Name = "Гектар",
                            OkeiCode = "059"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "кВт.ч",
                            Name = "Киловатт-час",
                            OkeiCode = "245"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "л.",
                            Name = "Лист",
                            OkeiCode = "625"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "пар",
                            Name = "Пара (2 шт.)",
                            OkeiCode = "715"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "упак",
                            Name = "Упаковка",
                            OkeiCode = "778"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "шт",
                            Name = "Штука",
                            OkeiCode = "796"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "ц",
                            Name = "Центнер (метрический) (100 кг)",
                            OkeiCode = "206"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.HasOne("Agro.DAL.Entities.AccountingPlan", "ParentPlan")
                        .WithMany("ChildPlans")
                        .HasForeignKey("ParentPlanId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPlan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Culture", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Department", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Field", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Agronomy.Department", "Department")
                        .WithMany("Fields")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Agronomy.Field", "ParentField")
                        .WithMany()
                        .HasForeignKey("ParentFieldId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Department");

                    b.Navigation("ParentField");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.LandPlot", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Agronomy.Field", null)
                        .WithMany("LandPlots")
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("Agro.DAL.Entities.BankDetails", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany("BankDetails")
                        .HasForeignKey("CounterpartyId");

                    b.HasOne("Agro.DAL.Entities.Organization", "Organization")
                        .WithMany("BankDetails")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Organization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetails")
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetailsOrg")
                        .WithMany()
                        .HasForeignKey("BankDetailsOrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankDetails");

                    b.Navigation("BankDetailsOrg");

                    b.Navigation("Counterparty");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId");

                    b.Navigation("ActualAddress");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("TypeDoc");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Document", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("TypeDoc");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Employee", b =>
                {
                    b.HasOne("Agro.DAL.Entities.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("Post");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.History", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Invoice", null)
                        .WithMany("History")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Agro.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetails")
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetailsOrg")
                        .WithMany()
                        .HasForeignKey("BankDetailsOrgId");

                    b.HasOne("Agro.DAL.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Nds", "Nds")
                        .WithMany()
                        .HasForeignKey("NdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.ReestrInvoice", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ReestrInvoiceId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankDetails");

                    b.Navigation("BankDetailsOrg");

                    b.Navigation("Contract");

                    b.Navigation("Counterparty");

                    b.Navigation("Nds");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Organization", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Address", "AddressUr")
                        .WithMany()
                        .HasForeignKey("AddressUrId");

                    b.HasOne("Agro.DAL.Entities.Employee", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId");

                    b.HasOne("Agro.DAL.Entities.Employee", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.HasOne("Agro.DAL.Entities.Employee", "GeneralAccountant")
                        .WithMany()
                        .HasForeignKey("GeneralAccountantId");

                    b.HasOne("Agro.DAL.Entities.Employee", "Hr")
                        .WithMany()
                        .HasForeignKey("HrId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Okato", "Okato")
                        .WithMany()
                        .HasForeignKey("OkatoId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Okfs", "Okfs")
                        .WithMany()
                        .HasForeignKey("OkfsId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Okogy", "Okogy")
                        .WithMany()
                        .HasForeignKey("OkogyId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Okopf", "Okopf")
                        .WithMany()
                        .HasForeignKey("OkopfId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Oktmo", "Oktmo")
                        .WithMany()
                        .HasForeignKey("OktmoId");

                    b.HasOne("Agro.DAL.Entities.Classifiers.Okved", "Okved")
                        .WithMany()
                        .HasForeignKey("OkvedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.RegInfoOrg.RegFns", "RegFns")
                        .WithMany()
                        .HasForeignKey("RegFnsId");

                    b.HasOne("Agro.DAL.Entities.RegInfoOrg.RegFss", "RegFss")
                        .WithMany()
                        .HasForeignKey("RegFssId");

                    b.HasOne("Agro.DAL.Entities.RegInfoOrg.RegPfr", "RegPfr")
                        .WithMany()
                        .HasForeignKey("RegPfrId");

                    b.Navigation("AddressUr");

                    b.Navigation("Cashier");

                    b.Navigation("Director");

                    b.Navigation("GeneralAccountant");

                    b.Navigation("Hr");

                    b.Navigation("Okato");

                    b.Navigation("Okfs");

                    b.Navigation("Okogy");

                    b.Navigation("Okopf");

                    b.Navigation("Oktmo");

                    b.Navigation("Okved");

                    b.Navigation("RegFns");

                    b.Navigation("RegFss");

                    b.Navigation("RegPfr");
                });

            modelBuilder.Entity("Agro.DAL.Entities.People", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Document", "IdentityDocument")
                        .WithMany()
                        .HasForeignKey("IdentityDocumentId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityDocument");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Post", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Product", b =>
                {
                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Nds", "Nds")
                        .WithMany()
                        .HasForeignKey("NdsId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.UnitOkei", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Nds");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ProductInvoice", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Invoice", "Invoice")
                        .WithMany("ProductsInvoice")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Nds", "Nds")
                        .WithMany()
                        .HasForeignKey("NdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Nds");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ReestrInvoice", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ScanFile", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Contract", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("ContractId");

                    b.HasOne("Agro.DAL.Entities.Invoice", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Agro.DAL.Entities.SpecificationContract", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("SpecificationContractId");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.StaffList", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.Navigation("ChildPlans");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Department", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Agronomy.Field", b =>
                {
                    b.Navigation("LandPlots");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.Navigation("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.Navigation("BankDetails");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.Navigation("History");

                    b.Navigation("ProductsInvoice");

                    b.Navigation("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Organization", b =>
                {
                    b.Navigation("BankDetails");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ReestrInvoice", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.Navigation("ScanFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
