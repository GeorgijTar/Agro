// <auto-generated />
using System;
using Agro.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agro.DAL.MySql.Migrations
{
    [DbContext(typeof(AgroDB))]
    [Migration("20220709045341_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSelect")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentPlanId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentPlanId");

                    b.HasIndex("StatusId");

                    b.ToTable("AccountingPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Раздел I",
                            IsSelect = false,
                            Name = "Внеоборотные активы",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 2,
                            Code = "01",
                            IsSelect = false,
                            Name = "Основные средства в организации",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 3,
                            Code = "01-1",
                            IsSelect = true,
                            Name = "Основные средства в организации (Недвижимое имущество)",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 4,
                            Code = "01-2",
                            IsSelect = true,
                            Name = "Основные средства в организации (Движимое имущество)",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 5,
                            Code = "01-6",
                            IsSelect = true,
                            Name = "Земельные участки",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "01-4",
                            IsSelect = true,
                            Name = "Выбытие основных спедств",
                            ParentPlanId = 2,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 7,
                            Code = "02",
                            IsSelect = false,
                            Name = "Амортизация ОС",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 8,
                            Code = "02-1",
                            IsSelect = true,
                            Name = "Амортизация основных средств, являющихся недвижимым имуществом",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 9,
                            Code = "02-2",
                            IsSelect = true,
                            Name = "Амортизация основных средств, являющихся движимым имуществом",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 10,
                            Code = "02-3",
                            IsSelect = true,
                            Name = "Амортизация арендованных основных средств",
                            ParentPlanId = 7,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 11,
                            Code = "03",
                            IsSelect = true,
                            Name = "Доходные вложения в материальные ценности",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 12,
                            Code = "04",
                            IsSelect = true,
                            Name = "Нематериальные активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 13,
                            Code = "05",
                            IsSelect = true,
                            Name = "Амортизация нематериальных активов",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 14,
                            Code = "07",
                            IsSelect = true,
                            Name = "Оборудование к установке",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 15,
                            Code = "08",
                            IsSelect = false,
                            Name = "Вложения во внеоборотные активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 16,
                            Code = "08-1",
                            IsSelect = true,
                            Name = "Приобретение земельных участков",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 17,
                            Code = "08-2",
                            IsSelect = true,
                            Name = "Приобретение объектов природопользования",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 18,
                            Code = "08-3",
                            IsSelect = true,
                            Name = "Строительство объектов основных средств",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 19,
                            Code = "08-3-1",
                            IsSelect = true,
                            Name = "Строительство объектов основных средств (Ангар)",
                            ParentPlanId = 18,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 20,
                            Code = "08-4",
                            IsSelect = true,
                            Name = "Приобретение объектов основных средств",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 21,
                            Code = "08-5",
                            IsSelect = true,
                            Name = "Приобретение нематериальных активов",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 22,
                            Code = "08-6",
                            IsSelect = true,
                            Name = "Закладка и выращивание многолетних насаждений",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 23,
                            Code = "08-7",
                            IsSelect = true,
                            Name = "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ",
                            ParentPlanId = 15,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 24,
                            Code = "09",
                            IsSelect = true,
                            Name = "Отложенные налоговые активы",
                            ParentPlanId = 1,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 25,
                            Code = "10",
                            IsSelect = false,
                            Name = "Материалы",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 26,
                            Code = "10-1",
                            IsSelect = true,
                            Name = "Сырье и материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 27,
                            Code = "10-2",
                            IsSelect = true,
                            Name = "Семена и посадочный материал",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 28,
                            Code = "10-3",
                            IsSelect = true,
                            Name = "Топливо (ГСМ)",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 29,
                            Code = "10-4",
                            IsSelect = true,
                            Name = "Покупные полуфабрикаты и комплектующие изделия, конструкции и детали",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 30,
                            Code = "10-5",
                            IsSelect = true,
                            Name = "Запасные части",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 31,
                            Code = "10-6",
                            IsSelect = true,
                            Name = "Удобрения, средства защиты растений",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 32,
                            Code = "10-8",
                            IsSelect = true,
                            Name = "Тара и тарные материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 33,
                            Code = "10-9",
                            IsSelect = true,
                            Name = "Инвентарь и хозяйственные принадлежности",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 34,
                            Code = "10-10",
                            IsSelect = true,
                            Name = "Специальная одежда, средства индивидуальной защиты",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 35,
                            Code = "10-11",
                            IsSelect = true,
                            Name = "Материалы и сырье, переданные в переработку на сторону",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 36,
                            Code = "10-12",
                            IsSelect = true,
                            Name = "Прочие материалы",
                            ParentPlanId = 25,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 37,
                            Code = "14",
                            IsSelect = false,
                            Name = "Резервы под снижение стоимости материальных ценностей",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 38,
                            Code = "14-1",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости материалов",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 39,
                            Code = "14-2",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости товаров",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 40,
                            Code = "14-3",
                            IsSelect = true,
                            Name = "Резервы под снижение стоимости готовой продукции",
                            ParentPlanId = 37,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 41,
                            Code = "19",
                            IsSelect = false,
                            Name = "НДС по приобретенным ценностям",
                            ParentPlanId = 44,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 42,
                            Code = "19-1",
                            IsSelect = true,
                            Name = "НДС по приобретенным товарно-материальным ценностям, работам, услугам",
                            ParentPlanId = 41,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 43,
                            Code = "19-2",
                            IsSelect = true,
                            Name = "НДС по приобретённым продуктам питания",
                            ParentPlanId = 41,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 44,
                            Code = "Раздел II",
                            IsSelect = false,
                            Name = "Производственные запасы",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 45,
                            Code = "Раздел III",
                            IsSelect = false,
                            Name = "Затраты на производство",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 46,
                            Code = "20",
                            IsSelect = false,
                            Name = "Основное производство",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 47,
                            Code = "20-1",
                            IsSelect = true,
                            Name = "Основное производство-Растениеводства",
                            ParentPlanId = 46,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 48,
                            Code = "20-3",
                            IsSelect = true,
                            Name = "Сортировка сельхоз продукции",
                            ParentPlanId = 46,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 49,
                            Code = "21",
                            IsSelect = true,
                            Name = "Полуфабрикаты собственного производства",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 50,
                            Code = "23",
                            IsSelect = false,
                            Name = "Вспомогательные производства",
                            ParentPlanId = 45,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 51,
                            Code = "23-2",
                            IsSelect = true,
                            Name = "Ремонт зданий, сооружений и сельхоз техники",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 52,
                            Code = "23-3",
                            IsSelect = true,
                            Name = "Электроснабжение",
                            ParentPlanId = 50,
                            StatusId = 5
                        },
                        new
                        {
                            Id = 53,
                            Code = "23-3",
                            IsSelect = true,
                            Name = "Электроснабжение",
                            ParentPlanId = 50,
                            StatusId = 5
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bik")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<string>("Ks")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NameBank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("StatusId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailsId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ogrn")
                        .HasColumnType("longtext");

                    b.Property<string>("Okpo")
                        .HasColumnType("longtext");

                    b.Property<string>("PayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeDocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeDocId");

                    b.HasIndex(new[] { "Inn" }, "NameIndex")
                        .IsUnique();

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("Agro.DAL.Entities.GroupDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeApplication")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Покупатели",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Поставщики",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Зерновые",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Масляничные",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Технические",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Отходы",
                            TypeApplication = "Готовая продукция"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Средства защиты растений",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Удобрения",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Семена",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Запасные части",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Материалы",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Малоценные товары, инвентарь",
                            TypeApplication = "Материальные запасы"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ГСМ",
                            TypeApplication = "Материальные запасы"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInvoce")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailsId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Nds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ndses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Без НДС",
                            Percent = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "0%",
                            Percent = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "10%",
                            Percent = 10
                        },
                        new
                        {
                            Id = 4,
                            Name = "20%",
                            Percent = 20
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameMini")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NdsId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NdsId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ScanFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("BodyBytes")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SpecificationContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SpecificationContractId");

                    b.ToTable("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("TypeId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Черновик"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Новый"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Действующий"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Заблокировано"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Актуально"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Удален"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Архивный"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.TypeDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeApplication")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Юридическое лицо",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Индивидуальный предприниматель",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Государственный орган",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Физическое лицо",
                            TypeApplication = "Контрагенты"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Юридический адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Фактический адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Почтовый адрес",
                            TypeApplication = "Адреса"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Готовая продукция",
                            TypeApplication = "Товары"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Материальные запасы",
                            TypeApplication = "Товары"
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.UnitOkei", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OkeiCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("UnitsOkei");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "ч",
                            Name = "Час",
                            OkeiCode = "356",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "мм",
                            Name = "Миллиметр",
                            OkeiCode = "003",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "см",
                            Name = "Сантиметр",
                            OkeiCode = "004",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "м",
                            Name = "Метр",
                            OkeiCode = "006",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "г",
                            Name = "Грамм",
                            OkeiCode = "163",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "кг",
                            Name = "Килограмм",
                            OkeiCode = "166",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "т",
                            Name = "Тонна; метрическая тонна (1000 кг)",
                            OkeiCode = "168",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "м3",
                            Name = "Кубический метр",
                            OkeiCode = "113",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "м2",
                            Name = "Квадратный метр",
                            OkeiCode = "055",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "га",
                            Name = "Гектар",
                            OkeiCode = "059",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "кВт.ч",
                            Name = "Киловатт-час",
                            OkeiCode = "245",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "л.",
                            Name = "Лист",
                            OkeiCode = "625",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "пар",
                            Name = "Пара (2 шт.)",
                            OkeiCode = "715",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "упак",
                            Name = "Упаковка",
                            OkeiCode = "778",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "шт",
                            Name = "Штука",
                            OkeiCode = "796",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "ц",
                            Name = "Центнер (метрический) (100 кг)",
                            OkeiCode = "206",
                            StatusId = 5
                        });
                });

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.HasOne("Agro.DAL.Entities.AccountingPlan", "ParentPlan")
                        .WithMany("ChildPlans")
                        .HasForeignKey("ParentPlanId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPlan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.BankDetails", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany("BankDetails")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetails")
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankDetails");

                    b.Navigation("Counterparty");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("TypeDoc");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.HasOne("Agro.DAL.Entities.BankDetails", "BankDetails")
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankDetails");

                    b.Navigation("Counterparty");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Product", b =>
                {
                    b.HasOne("Agro.DAL.Entities.GroupDoc", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.Nds", "Nds")
                        .WithMany()
                        .HasForeignKey("NdsId");

                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.UnitOkei", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Nds");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Agro.DAL.Entities.ScanFile", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Contract", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("ContractId");

                    b.HasOne("Agro.DAL.Entities.Invoice", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Agro.DAL.Entities.SpecificationContract", null)
                        .WithMany("ScanFiles")
                        .HasForeignKey("SpecificationContractId");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agro.DAL.Entities.TypeDoc", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Agro.DAL.Entities.UnitOkei", b =>
                {
                    b.HasOne("Agro.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Agro.DAL.Entities.AccountingPlan", b =>
                {
                    b.Navigation("ChildPlans");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Contract", b =>
                {
                    b.Navigation("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Counterparty", b =>
                {
                    b.Navigation("BankDetails");
                });

            modelBuilder.Entity("Agro.DAL.Entities.Invoice", b =>
                {
                    b.Navigation("ScanFiles");
                });

            modelBuilder.Entity("Agro.DAL.Entities.SpecificationContract", b =>
                {
                    b.Navigation("ScanFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
